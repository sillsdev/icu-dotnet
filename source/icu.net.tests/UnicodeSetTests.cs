// Copyright (c) 2013 SIL International
// This software is licensed under the MIT license (http://opensource.org/licenses/MIT)
using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;

namespace Icu.Tests
{
	[TestFixture]
	public class UnicodeSetTests
	{
		[TestCase(null, // new[] {}
			ExpectedResult = "[]")]
		[TestCase("", // new[] { "" }
			ExpectedResult = "[]")]
		[TestCase("A B C D E F G H I J K L M N O P Q R S TZ T U V W X Y Z",
			ExpectedResult = "[A-Z{TZ}]")]
		[TestCase("α Α ά ὰ ᾷ ἀ Ἀ ἁ Ἁ ἄ Ἄ ἂ ἅ Ἅ ἃ Ἃ ᾶ ᾳ ᾴ ἆ Ἆ ᾄ ᾅ β Β γ Γ δ Δ ε Ε έ ὲ ἐ Ἐ ἑ Ἑ ἔ Ἔ ἕ Ἕ ἓ Ἓ ζ Ζ η Η ή ὴ ῇ ἠ Ἠ ἡ Ἡ ἤ Ἤ ἢ ἥ Ἥ Ἢ ἣ ᾗ ῆ ῃ ῄ ἦ Ἦ ᾖ ἧ ᾐ ᾑ ᾔ θ Θ ι ί ὶ ϊ ΐ ῒ ἰ Ἰ ἱ Ἱ ἴ Ἴ ἵ Ἵ ἳ ῖ ἶ ἷ κ Κ λ Λ μ Μ ν Ν ξ Ξ ο Ο ό ὸ ὀ Ὀ ὁ Ὁ ὄ Ὄ ὅ ὂ Ὅ ὃ Ὃ π Π ρ Ρ ῥ Ῥ σ ς Σ τ Τ υ Υ ύ ὺ ϋ ΰ ῢ ὐ ὑ Ὑ ὔ ὕ ὒ Ὕ ὓ ῦ ὖ ὗ Ὗ φ Φ χ Χ ψ Ψ ω ώ ὼ ῷ ὠ ὡ Ὡ ὤ Ὤ ὢ ὥ Ὥ ᾧ ῶ ῳ ῴ ὦ Ὦ ὧ Ὧ ᾠ",
			ExpectedResult = @"[\u0391-\u0398\u039A-\u03A1\u03A3-\u03A8\u03B1-\u03C9{\u0391\u0313}{\u0391\u0313\u0301}{\u0391\u0313\u0342}{\u0391\u0314}{\u0391\u0314\u0300}{\u0391\u0314\u0301}{\u0395\u0313}{\u0395\u0313\u0301}{\u0395\u0314}{\u0395\u0314\u0300}{\u0395\u0314\u0301}{\u0397\u0313}{\u0397\u0313\u0300}{\u0397\u0313\u0301}{\u0397\u0313\u0342}{\u0397\u0314}{\u0397\u0314\u0301}{\u0399\u0313}{\u0399\u0313\u0301}{\u0399\u0314}{\u0399\u0314\u0301}{\u039F\u0313}{\u039F\u0313\u0301}{\u039F\u0314}{\u039F\u0314\u0300}{\u039F\u0314\u0301}{\u03A1\u0314}{\u03A5\u0314}{\u03A5\u0314\u0301}{\u03A5\u0314\u0342}{\u03A9\u0313\u0301}{\u03A9\u0313\u0342}{\u03A9\u0314}{\u03A9\u0314\u0301}{\u03A9\u0314\u0342}{\u03B1\u0300}{\u03B1\u0301}{\u03B1\u0301\u0345}{\u03B1\u0313}{\u03B1\u0313\u0300}{\u03B1\u0313\u0301}{\u03B1\u0313\u0301\u0345}{\u03B1\u0313\u0342}{\u03B1\u0314}{\u03B1\u0314\u0300}{\u03B1\u0314\u0301}{\u03B1\u0314\u0301\u0345}{\u03B1\u0342}{\u03B1\u0342\u0345}{\u03B1\u0345}{\u03B5\u0300}{\u03B5\u0301}{\u03B5\u0313}{\u03B5\u0313\u0301}{\u03B5\u0314}{\u03B5\u0314\u0300}{\u03B5\u0314\u0301}{\u03B7\u0300}{\u03B7\u0301}{\u03B7\u0301\u0345}{\u03B7\u0313}{\u03B7\u0313\u0300}{\u03B7\u0313\u0301}{\u03B7\u0313\u0301\u0345}{\u03B7\u0313\u0342}{\u03B7\u0313\u0342\u0345}{\u03B7\u0313\u0345}{\u03B7\u0314}{\u03B7\u0314\u0300}{\u03B7\u0314\u0301}{\u03B7\u0314\u0342}{\u03B7\u0314\u0342\u0345}{\u03B7\u0314\u0345}{\u03B7\u0342}{\u03B7\u0342\u0345}{\u03B7\u0345}{\u03B9\u0300}{\u03B9\u0301}{\u03B9\u0308}{\u03B9\u0308\u0300}{\u03B9\u0308\u0301}{\u03B9\u0313}{\u03B9\u0313\u0301}{\u03B9\u0313\u0342}{\u03B9\u0314}{\u03B9\u0314\u0300}{\u03B9\u0314\u0301}{\u03B9\u0314\u0342}{\u03B9\u0342}{\u03BF\u0300}{\u03BF\u0301}{\u03BF\u0313}{\u03BF\u0313\u0300}{\u03BF\u0313\u0301}{\u03BF\u0314}{\u03BF\u0314\u0300}{\u03BF\u0314\u0301}{\u03C1\u0314}{\u03C5\u0300}{\u03C5\u0301}{\u03C5\u0308}{\u03C5\u0308\u0300}{\u03C5\u0308\u0301}{\u03C5\u0313}{\u03C5\u0313\u0300}{\u03C5\u0313\u0301}{\u03C5\u0313\u0342}{\u03C5\u0314}{\u03C5\u0314\u0300}{\u03C5\u0314\u0301}{\u03C5\u0314\u0342}{\u03C5\u0342}{\u03C9\u0300}{\u03C9\u0301}{\u03C9\u0301\u0345}{\u03C9\u0313}{\u03C9\u0313\u0300}{\u03C9\u0313\u0301}{\u03C9\u0313\u0342}{\u03C9\u0313\u0345}{\u03C9\u0314}{\u03C9\u0314\u0301}{\u03C9\u0314\u0342}{\u03C9\u0314\u0342\u0345}{\u03C9\u0342}{\u03C9\u0342\u0345}{\u03C9\u0345}]")]
		public string ToPattern(string input)
		{
			return UnicodeSet.ToPattern(input?.Split(' ') ?? new string[]{});
		}

		[Test]
		public void NullToPattern()
		{
			Assert.That(() => UnicodeSet.ToPattern(null), Throws.TypeOf<ArgumentNullException>());
		}

		[TestCase("[A]",
			ExpectedResult = new[] { "A" })]
		[TestCase("[A-GH-NO-ST-Z{TZ}]",
			ExpectedResult = new[] { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "TZ" })]
		[TestCase(@"[\u0391-\u0398\u039A-\u03A1\u03A3-\u03A8\u03B1-\u03C9{\u0391\u0313}{\u0391\u0313\u0301}{\u0391\u0313\u0342}{\u0391\u0314}{\u0391\u0314\u0300}{\u0391\u0314\u0301}{\u0395\u0313}{\u0395\u0313\u0301}{\u0395\u0314}{\u0395\u0314\u0300}{\u0395\u0314\u0301}{\u0397\u0313}{\u0397\u0313\u0300}{\u0397\u0313\u0301}{\u0397\u0313\u0342}{\u0397\u0314}{\u0397\u0314\u0301}{\u0399\u0313}{\u0399\u0313\u0301}{\u0399\u0314}{\u0399\u0314\u0301}{\u039F\u0313}{\u039F\u0313\u0301}{\u039F\u0314}{\u039F\u0314\u0300}{\u039F\u0314\u0301}{\u03A1\u0314}{\u03A5\u0314}{\u03A5\u0314\u0301}{\u03A5\u0314\u0342}{\u03A9\u0313\u0301}{\u03A9\u0313\u0342}{\u03A9\u0314}{\u03A9\u0314\u0301}{\u03A9\u0314\u0342}{\u03B1\u0300}{\u03B1\u0301}{\u03B1\u0301\u0345}{\u03B1\u0313}{\u03B1\u0313\u0300}{\u03B1\u0313\u0301}{\u03B1\u0313\u0301\u0345}{\u03B1\u0313\u0342}{\u03B1\u0314}{\u03B1\u0314\u0300}{\u03B1\u0314\u0301}{\u03B1\u0314\u0301\u0345}{\u03B1\u0342}{\u03B1\u0342\u0345}{\u03B1\u0345}{\u03B5\u0300}{\u03B5\u0301}{\u03B5\u0313}{\u03B5\u0313\u0301}{\u03B5\u0314}{\u03B5\u0314\u0300}{\u03B5\u0314\u0301}{\u03B7\u0300}{\u03B7\u0301}{\u03B7\u0301\u0345}{\u03B7\u0313}{\u03B7\u0313\u0300}{\u03B7\u0313\u0301}{\u03B7\u0313\u0301\u0345}{\u03B7\u0313\u0342}{\u03B7\u0313\u0342\u0345}{\u03B7\u0313\u0345}{\u03B7\u0314}{\u03B7\u0314\u0300}{\u03B7\u0314\u0301}{\u03B7\u0314\u0342}{\u03B7\u0314\u0342\u0345}{\u03B7\u0314\u0345}{\u03B7\u0342}{\u03B7\u0342\u0345}{\u03B7\u0345}{\u03B9\u0300}{\u03B9\u0301}{\u03B9\u0308}{\u03B9\u0308\u0300}{\u03B9\u0308\u0301}{\u03B9\u0313}{\u03B9\u0313\u0301}{\u03B9\u0313\u0342}{\u03B9\u0314}{\u03B9\u0314\u0300}{\u03B9\u0314\u0301}{\u03B9\u0314\u0342}{\u03B9\u0342}{\u03BF\u0300}{\u03BF\u0301}{\u03BF\u0313}{\u03BF\u0313\u0300}{\u03BF\u0313\u0301}{\u03BF\u0314}{\u03BF\u0314\u0300}{\u03BF\u0314\u0301}{\u03C1\u0314}{\u03C5\u0300}{\u03C5\u0301}{\u03C5\u0308}{\u03C5\u0308\u0300}{\u03C5\u0308\u0301}{\u03C5\u0313}{\u03C5\u0313\u0300}{\u03C5\u0313\u0301}{\u03C5\u0313\u0342}{\u03C5\u0314}{\u03C5\u0314\u0300}{\u03C5\u0314\u0301}{\u03C5\u0314\u0342}{\u03C5\u0342}{\u03C9\u0300}{\u03C9\u0301}{\u03C9\u0301\u0345}{\u03C9\u0313}{\u03C9\u0313\u0300}{\u03C9\u0313\u0301}{\u03C9\u0313\u0342}{\u03C9\u0313\u0345}{\u03C9\u0314}{\u03C9\u0314\u0301}{\u03C9\u0314\u0342}{\u03C9\u0314\u0342\u0345}{\u03C9\u0342}{\u03C9\u0342\u0345}{\u03C9\u0345}]",
			ExpectedResult = new[] { "Α", "Β", "Γ", "Δ", "Ε", "Ζ", "Η", "Θ", "Κ", "Λ", "Μ", "Ν", "Ξ", "Ο", "Π", "Ρ", "Σ", "Τ", "Υ", "Φ", "Χ", "Ψ", "α", "β", "γ", "δ", "ε", "ζ", "η", "θ", "ι", "κ", "λ", "μ", "ν", "ξ", "ο", "π", "ρ", "ς", "σ", "τ", "υ", "φ", "χ", "ψ", "ω", "Ἀ", "Ἄ", "Ἆ", "Ἁ", "Ἃ", "Ἅ", "Ἐ", "Ἔ", "Ἑ", "Ἓ", "Ἕ", "Ἠ", "Ἢ", "Ἤ", "Ἦ", "Ἡ", "Ἥ", "Ἰ", "Ἴ", "Ἱ", "Ἵ", "Ὀ", "Ὄ", "Ὁ", "Ὃ", "Ὅ", "Ῥ", "Ὑ", "Ὕ", "Ὗ", "Ὤ", "Ὦ", "Ὡ", "Ὥ", "Ὧ", "ὰ", "ά", "ᾴ", "ἀ", "ἂ", "ἄ", "ᾄ", "ἆ", "ἁ", "ἃ", "ἅ", "ᾅ", "ᾶ", "ᾷ", "ᾳ", "ὲ", "έ", "ἐ", "ἔ", "ἑ", "ἓ", "ἕ", "ὴ", "ή", "ῄ", "ἠ", "ἢ", "ἤ", "ᾔ", "ἦ", "ᾖ", "ᾐ", "ἡ", "ἣ", "ἥ", "ἧ", "ᾗ", "ᾑ", "ῆ", "ῇ", "ῃ", "ὶ", "ί", "ϊ", "ῒ", "ΐ", "ἰ", "ἴ", "ἶ", "ἱ", "ἳ", "ἵ", "ἷ", "ῖ", "ὸ", "ό", "ὀ", "ὂ", "ὄ", "ὁ", "ὃ", "ὅ", "ῥ", "ὺ", "ύ", "ϋ", "ῢ", "ΰ", "ὐ", "ὒ", "ὔ", "ὖ", "ὑ", "ὓ", "ὕ", "ὗ", "ῦ", "ὼ", "ώ", "ῴ", "ὠ", "ὢ", "ὤ", "ὦ", "ᾠ", "ὡ", "ὥ", "ὧ", "ᾧ", "ῶ", "ῷ", "ῳ" })]
		public IEnumerable<string> ToCharacters(string pattern)
		{
			return UnicodeSet.ToCharacters(pattern);
		}

		[TestCase(null)]
		[TestCase("[]")]
		public void ToCharacters_Null(string pattern)
		{
			Assert.That(UnicodeSet.ToCharacters(pattern), Is.EqualTo(Enumerable.Empty<string>()));
		}

		[Test]
		public void ToCharacters_InvalidPattern()
		{
			Assert.That(() => UnicodeSet.ToCharacters("[A-"), Throws.ArgumentException);
		}

		[Test]
		public void ToCharacters_UpperPlane()
		{
			string pattern = @"[\U00010D00]";
			string strForUpperPlaneCharacter = UnicodeSet.ToCharacters(pattern).First();
			Assert.That(strForUpperPlaneCharacter, Is.EqualTo("𐴀"));
			Assert.That(char.ConvertToUtf32(strForUpperPlaneCharacter, 0), Is.EqualTo(0x00010D00));
		}
	}
}
